#title Perl
#author Ole Yang

<contents>

* 数据类型
** 一般变量
*** 数字
<src type="perl">
$a = 1;
print "a=$a \n";
</src>

*** 字符串
单引号里面的内容不会展开,例如
<src type="perl">
$a=1;
print 'a=$a\n'     # a=$a
</src>
双引号里面的内容会展开
<src type="perl">
$a=1;
print "a=$a";                   # a=1
</src>

** 数组
数组是以@开头,@表示“这些”、“那些”,例如去数组arr的1,2,3下标这些的元素
<src type="perl">
@arr = (a..z);
print "\n @arr[1,2,3]";         # 取$arr[1],$arr[2],$arr[3]
</src>
取单个数组的值还是用$
<src type="perl">
@arr =  (1,2,3,4);
# 取第0个元素
print "number is $arr[1]";
# 改变第二个元素的值
$arr[1] = 'a';
</src>

*** 遍历数组

foreach
<src type="text">
@arr=qw(a b c);
foreach $v (@arr) {
  print "$v \n";
}
</src>
使用默认变量$_
<src type="text">
@arr = qw(a b c);
foreach (@arr) {
  print "$_ \n";
}
</src>

$#arr 表示数组的最大下标
<src type="perl">
@letter = (a..z);
for($i=0, $i<$#letter; $i++) {
  print "$letter[$i] \t";
}
print "\n";
</src>

*** 列表和数组
列表就是类似这样(1,2,3)

**** 匿名数组
用中括号产生匿名数组,下标是使用数字,引用下标使用->
<src type="text">
$line = [1,2,3];
# 取第一个元素
$line->[0]                      # 不是$line[0]
</src>

普通的数组的元素只能包含普通变量(数字、字符串、地址),不能包含数组或者其他的复杂变量，匿名数组就可以创建多维数组
<src type="text">
$line = ['start_point', 'end_point', [0,1], [20, 20]]
print "\$line->[0] = $line->[0] \n";
print "\$line->[1] = $line->[1] \n";
print "\$line->[2][0] = $line->[2][0] \n";
print "\$line->[2][1] = $line->[2][1] \n";
print "\$line->[3][0] = $line->[3][0] \n";
print "\$line->[3][1] = $line->[3][1] \n";
</src>




** 关联数组/哈希表
*** 赋值
关联数组就是以字符串为下标, 用%表示这些、那些，可以用列表的形式来赋值。
<src type="text">
%hash = (
  'a', 1,
  'b', 2,
)；  
</src>
可以使用=>来赋值更加直观
<src type="text">
%hash = (
  'a' => 1,
  'b' => 2,
  );
</src>

*** 取值
取单个值依然使用$,key使用{$key}
<src type="text">
%hash = ('a'=>1, 'b'=>2);
print $hash{'a'};
</src>

使用foreach
<src type="text">
%hash = ('a'=>1, 'b'=>2);
foreach $i (sort keys %hash) {
  print "$hash{$i} \t";
}  
</src>
sort,keys都是函数,当然可以使用括号,例如foreach $i (sort(keys(%hash)))

*** 常用相关函数
 - keys 检索关联数组中的所有键
 - values 所有值
 - delete 删除对应的条目
 - each 检索某条键/值
<src type="text">

</src>

 

* 帮助
** 函数
<src type="text">
perldoc -tf function_name
</src>

** 语法
<src type="text">
perldoc perlsyn
</src>

    

* 流程控制
** if
** unless
** untill
** do
** for
*** C风格
<src type="text">
for ($i = 0; $i<=100; $++){
  $sum +=$i;
}
</src>
*** perl 风格
<src type="text">
@arr = (a..d);
for (@arr) {
  print "$_\n";
}
</src>

** foreach
* 文件
** 打开
*** 只读方式
<src type="text">
open(file_hander, 'file_name');
open(file_hander, '<file_name');
</src>
file_name可以是相对路径，也可以是绝对路径
<src type="text">
open(FP, 'myfile.txt');
</src>
也可以加<符号open(FP, '<myfile.txt');  也可以不用括号 open FP, '<myfile.txt';

*** 打开管道符
<src type="text">
open PIP, '| 命令'
</src>
例如
<src type="text">
open FILE, " | cat > hello ";
</src>
把FILE句柄中的内容输出作为命令cat >hello的输入,相当于
<src type="text">
open FILE, '>hello';
</src>
发邮件给david
<src type="text">
open MESSAGE, "| mail david";
print MESSAGE ('Hi David! Your Perl programming send this!'); # 邮件发送的内容
close MESSAGE;
</src>

*** 写方式
写方式分为覆盖写和追加

**** 覆盖写
<src type="text">
open(file_hander, '>file_name');
</src>

**** 追加
<src type="text">
open(FP, '>>file_name');
</src>

** 读取内容
*** 读取单个字符
getc
<src type="text">
open FH, "/etc/passwd";
$char = getc FH;              # 注意不是<FH>
print "char = $char \n";        # r
</src>

*** 单行读取
<src type="text">
open(FP, '/tmp/data.txt');
$line = <FP>;                   # 包括回车符,当然可以用chomp来去除回车符,指针向下移一行
</src>
使用循环读取
<src type="text">
open FH, 'test.txt';
while ($line＝<FH>) {
  print $line;
}
</src>
另外一种更加简单的写法
<src type="text">
open FH, 'test.txt';
while (<FH>) {
  print $_;
}
</src>

*** 读取全部内容
<src type="text">
open(FP, '/tmp/data.txt');
@all = <FP>;
</src>

*** 读取容易长度的字符
<src type="text">
$result = read ( file_handle, $read_char, length, skipchar );
</src>
从file_handle中读取长度为length,跳过前面的skipchar的字符,保存在$read_char中.返回结果保存在$result中,成功: 返回读取的个数(有可能小于length),失败返回空字符,如果到了文件尾,返回0
 - $read_char 读取到的字符保存的变量
 - length 读取字符的长度
 - skipval 忽略前面的字符个数,负数表示从后面算起
 - $result 返回值. 到了文件尾eof: 返回 0 ; 失败:返回undef,变量为定义,可以用defined来检测,类似php的isset; 成功:返回读取的个数
<src type="text">
open FH, "/etc/passwd";
$readCharCount = read ( FH, $readChar, 4, 4 );                # 注意不是<FH>
if ( $readCharCount == 1 ) {
    print "read 5th's char from /etc/passwd successful: $readChar \n";               # r
} else {
    print "read file failed: $readCharCount \n";
}
</src>
 

** 判断文件的状态
<src type="text">
-op 'file_name'
</src>
op为操作符,可取的值:
 - b block 判断是否块文件
 - c char 是否为字符设备
 - d directory 判断是否为目录
 - e exists 判断文件是否存在
 - f file     判断是否为普通文件
 - g setgid   判断是否设置了setgid位
 - k 是否设置了sticky为
 - l link file  判断是否为符号链接文件
 - o owner   判断是否为文件的拥有者
 - p piping   是否为管道符
 - r read     是否可读
 - s    判断是否非空
 - t terminal 判断是否为终端
 - u 是否设置了setuid
 - w write 是否可写
 - x excute 是否可执行
 - z 是否为空
 - A access 距离上次访问多长时间
 - B Binary  判断是否二进制文件
 - C   距离上次访问inode经过的时间
 - M modify  距离最后一次修改经过的时间
 - O Real Owner  判断此文件是否是"真正用户(登陆时的用户,不是"有效用户")"所拥有
 - R Real Read     判断"真正用户"是否可读
 - S soket         判断是否为soket文件
 - T text file     判断是否为文本文件
 - W Real Write    判断"真正用户"是否可写
 - X  Real User executable   判断"真正用户"是否可执行

<src type="text">
if ( -e '/tmp/data.txt' ) {
    open(FP, '/tmp/data.txt');
    $line = <FP>;
    @all_contents_as_array = <FP>;
}
unless
</src>

** 重命名
<src type="text">
rename 'file1.txt' 'file2.txt';
</src>

* 文件夹
** 创建文件夹
<src type="text">
mkdir directory_name, mode
</src>
在tmp中创建一个test文件,权限为0755
<src type="text">
mkdir /tmp/text, 0755 or warn "Can't create test directory in /tmp: $!";
</src>

** 判断文件夹是否存在
<src type="text">
if( -d "file" ) {
  print  "file is a directory";
}
</src>

** 打开文件夹
<src type="text">
opendir DIR, 'file';
</src>

** 删除文件夹
<src type="text">
rmdir "file";
</src>

** 关闭文件夹
<src type="text">
closedir(DIR);
</src>

** 重命名
<src type="text">
rename "dir1" "dir2"
</src>


* 内置变量
** $_
默认值,

** $!
错误信息

** $$
perl的进程号

** $/
保存换行符的变量.默认的换行符是\n,也可以自己定义换行符

chinaunix上perl社区的一个网友总结的内置变量

 - $- 当前页可打印的行数,属于Perl格式系统的一部分
 - $! 根据上下文内容返回错误号或者错误串
 - $” 列表分隔符
 - $# 打印数字时默认的数字输出格式
 - $$ Perl解释器的进程ID
 - $% 当前输出通道的当前页号
 - $& 与上个格式匹配的字符串
 - $( 当前进程的组ID
 - $) 当前进程的有效组ID
 - $* 设置1表示处理多行格式.现在多以/s和/m修饰符取代之.
 - $, 当前输出字段分隔符
 - $. 上次阅读的文件的当前输入行号
 - $/ 当前输入记录分隔符,默认情况是新行
 - $: 字符设置,此后的字符串将被分开,以填充连续的字段.
 - $; 在仿真多维数组时使用的分隔符.
 - $? 返回上一个外部命令的状态
 - $@ Perl解释器从eval语句返回的错误消息
 - $[ 数组中第一个元素的索引号
 - $\ 当前输出记录的分隔符
 - $] Perl解释器的子版本号
 - $^ 当前通道最上面的页面输出格式名字
 - $^A 打印前用于保存格式化数据的变量
 - $^D 调试标志的值
 - $^E 在非UNIX环境中的操作系统扩展错误信息
 - $^F 最大的文件捆述符数值
 - $^H 由编译器激活的语法检查状态
 - $^I 内置控制编辑器的值
 - $^L 发送到输出通道的走纸换页符
 - $^M 备用内存池的大小
 - $^O 操作系统名
 - $^P 指定当前调试值的内部变量
 - $^R 正则表达式块的上次求值结果
 - $^S 当前解释器状态
 - $^T 从新世纪开始算起,脚步本以秒计算的开始运行的时间
 - $^W 警告开关的当前值
 - $^X Perl二进制可执行代码的名字
 - $_ 默认的输入/输出和格式匹配空间
 - $| 控制对当前选择的输出文件句柄的缓冲
 - $~ 当前报告格式的名字
 - $` 在上个格式匹配信息前的字符串
 - $’ 在上个格式匹配信息后的字符串
 - $+ 与上个正则表达式搜索格式匹配的最后一个括号
 - $< 当前执行解释器的用户的真实ID
 - $ 含有与上个匹配正则表达式对应括号结果
 - $= 当前页面可打印行的数目
 - $> 当前进程的有效用户ID
 - $0 包含正在执行的脚本的文件名
 - $ARGV 从默认的文件句柄中读取时的当前文件名
 - %ENV 环境变量列表
 - %INC 通过do或require包含的文件列表
 - %SIG 信号列表及其处理方式
 - @_ 传给子程序的参数列表
 - @ARGV 传给脚本的命令行参数列表
 - @INC 在导入模块时需要搜索的目录列表
 - $-[0]和$+[0] 代表当前匹配的正则表达式在被匹配的字符串中的起始和终止的位置

* 子程序(函数)
** 定义
定义是使用sub
<src type="text">
sub myroutin {
   code...
}
</src>

** 参数
参数的接收用@_,@_是传递给子函数的参数列表.当然如果只有一个参数,也可以用shift,当使用shift不给参数时默认就是@_

** 调用
*** 未声明之前调用
可以先调用,后定义,但是需要使用&或者是do来调用未定义的函数
<src type="text">
&sub add ($arg1, $arg2);

sub add {
  my($arg1, $arg2) = @_;
  $arg1 + $arg2;
}
</src>

*** 先声明后调用
先声明后调用的就不需要&或者是do
<src type="text">
sub add;
add(1,2);

sub add {
  my $sum;
  foreach (@_) {
    $sum += $_;
  }
  return $sum;
}
</src>

*** 先定义后调用
<src type="text">
sub add {
  my $sum;
  for (@_) {
    $sum += $_;
  }
  return $sum;
}
print add(1..100);
</src>

*** 传引用
一般的传参数是通过copy值来实现的.当传递的参数值很大的时候,会浪费很多的时间和空间.传引用是通过*来操作的(c,php是通过&)
<src type="text">
sub add;
@arr = (1..5);
add( *arr );
print "@arr \n";

sub add {
  my (*arr) = @_;
  for($i=0; $i<@arr; $i++){
    @arr[$i] += 1;
  }
}
</src>

**** 文件句柄的引用
传递文件句柄的引用\*给函数.

有时需要把统一信息输出到不同的地方,比如同时输出到: 屏幕、打印机、日志

<src type="text">
&spitOut(\*STDIN);            # 把标准输入作为参数传递给spitOut
&spitOut(\*LPHANDLE);           # 传递打印机
&spitOut(\*LOGHANDLE);          # 传递日志文件

sub spitOut {
  $fh = shift(@_);

  print $fh "Gee, I like this lettuce"; 

}
</src>


*** 递归


*** 预设函数
在一个perl文件中,有三个预设函数分别为:
 - BEGIN 脚本执行时自动调用次函数,如果有多个BEIN函数,按顺序执行
 - AUTOLOAD 当函数不存在时调用次函数
 - END 当脚本退出自动执行,如果有多个END,按逆序执行
<src type="text">
#!/usr/bin/perl -w

BEGIN {
  print "Script start .... \n";
}

do noExistRoutine(1..3);

AUTOLOAD {
  print "Call $AUTOLOAD is not exist! \n";
  print "Parameters passwd: $@_ \n";
}

END {
  print "Script End....";
}  
</src>
可以在脚本执行之前输出一下欢迎信息或者是初始化一下变量,在脚本退出时释放资源等

* 关联数组/哈希表

** 相关函数
*** keys
*** values
*** sorts

* 匹配模式
** =~
匹配
if($string =~ /^http:\/\//) {
  print "Is url \n";
}

** !~
不匹配

** 例子
检查变量名是否合法

** tr/s
替换,tr逐个对应替换,s真正意义上的替换

替换字符中的数字
<src type="text">
$str = 'abcd123abc;
$str =~ tr/123//;
print "str=$str \n";            # abcd123abc
</src>
上面的例子对$str没有作用,因为替换字符为空,不够123对应的3个字符,要去除$str中的123数字应该用s
<src type="text">
$str = 'abcd123abc';
$str =~ s/123//;
print "str = $str \n";          # abcdabc
</src>

再来看看一个tr的例子
<src type="text">
$str = 'My name is Bollar.His name is Jhon';
$str =~ tr/Bollar/Ole/;
print "str = $str \n";
</src>
结果
<src type="text">
str = My neme is Oleeee.His neme is Jhln 
</src>
name 被改成neme,Bollar 变成Oleeee, Jhon变成Jhln.发生这样变化的原因是Bollar替换成Ole是一个一个对应的,并且是全局的,会把字符串中的B->O,o->l,l-e,Bollar中还剩的字符lar,l按照前面的匹配原则替换成e,a没有对应就用ole中的最后一个字符e替换,r也一样用e替换



* 函数
** 字符串
*** qw
quote word
给每个元素加引号
<src type="text">
@arr = qw(a b c);
</src>

*** qq
给整体加上引号


*** qx

*** qr

** chop
去除最后一个字符

** chomp
去除最后的回车符

*** index/rindex
查找字符串在母字符串中的位置,从0开始,返回位置值.rindex从后面开始查找

查找c在abcde中的位置
<src type="text">
$start = index "abcde", "c";
print $start;                   # 2
</src>

** 预览
<verse>
数组：chomp, join, keys, map, pop, push, reverse, shift, sort, splice, split, unshift, values
数据库：dbmclose, dbmopen
目录：chdir, closedir, mkdir, opendir, readdir, rewinddir, rmdir, seekdir, telldir
文件：binmode, chdir, chmod, chown, chroot, close, eof, fnctl, fileno, flock, getc, glob, ioctl, link, lstat, open, print, printf, read, readdir, readlink, rename, rmdir, seek, select, stat, symlink, sysopen, sysread, syswrite, tell, truncate, umask, unlink, utime, write
组：endgrent, getgrent, getgrgid, getgrname, getpgrp, setgrent, setpgrp
Hash: delete, each, exists, keys, values
主机：endhostent, gethostbyaddr, gethostbyname, sethostent
输入：getc, read, sysread
处理器间通讯：msgctl, msgget, msgrcv, msgsnd, pipe, semctl, semget, semop, shmctl, shmget, hmread, shmwrite
数学：abs, atan2, cos, exp, hex, int, log, oct, rand, sin, sqrt, srand
消息队列：msgctl, msgget, msgrcv, msgsnd
其他：bless, defined, do, eval, formline, import, ref, scalar, syscall, tie, tied, undef, untie, wantarray
网络：endnetent, getnetbyaddr, getnetbyname, getnetent, setnetent
输出：die, print, printf, syswrite, warn, write
口令：endpwent, getpwent, getpwname, getpwuid, setpwent
进程：alarm, die, dump, exec, exit, fork, getlogin, getpgrp, getppid, getpriority, kill, setpriority, sleep, system, times, umask, wait, waitpid
协议：endprotent, getprotobyname, getprotobynumber, getprotoent, getservbyname, getservbyport, getservent, setprotoent
正则表达式：grep, pos, quotemeta, reset, split, study
范围：caller, local, my
服务：endservent, getservbyname, getservbyport, getservent, setservent
套节字：accept, bind, connect, gethostbyaddr, gethostbyname, gethostent, getpeername, getservbyname, getservbyport, getservent, getsockname, getsockopt, listen, recv, select, send, setsockopt, shutdown, socket, socketpair
字符串：chop, chr, crypt, hex, index, join, lc, lcfirst, length, oct, Ord, pack, q, qq, quotemeta, qw, qx, reverse, rindex, split, sprintf, substr, uc, ucfirst, unpack, vec
时间：gmtime, localtime, time
UNIX: chmod, chown, chroot, dump, endgrent, endhostent, endnetent, endprotent, endpwent, endservent, fnctl, fork, getgrent, getgrgid, getgrname, gethostent, getlogin, getnetent, getpgrp, getppid, getpriority, getprotobyname, getprotobynumber, getprotoent, getpwent, getpwname, getpwuid, getservbyname, getservbyport, getservent, ioctl, link, lstat, readlink, select, setgrent, sethostent, setnetent, setpgrp, setpriority, setprotoent, setpwent, setservent, sleep, syscall, times, umask, wait, waitpid 
</verse>

** undef
取消define的变量
<src type="text">
undef $/;
</src>
 



* 注意问题
** <STDIN>
while条件中<STDIN>变量值会释放
<src type="text">
while($input = <STDIN>) {
  print "input = $input \n";
}
print "after while input = $input \n";
</src>
结果
<src type="text">
$ ./test.pl
aa bb
aa bb
^D            # C-d 结束输入
after while input = 
</src>

 
